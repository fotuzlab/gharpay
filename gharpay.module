<?php

/**
 * @file
 * Gharpay module.
 */

// Set Gharapay API, password and Service url.
define('GP_API', variable_get('gharpay_api_key', ''));
define('GP_PASSWORD', variable_get('gharpay_password', ''));
define('GP_SERVICE_URL', variable_get('gharpay_service_url', ''));

// Check if library exists. Though already defined in hook_requirements()
// its a double check.
$gharpay_library = "./sites/all/libraries/gharpay/GharpayAPI.php";
if (file_exists($gharpay_library)) {
  require_once($gharpay_library);
  // Include dependent files.
  require_once("./" . drupal_get_path('module', 'gharpay') . "/gharpay.class.php");
}
else {
  drupal_set_message(t("Gharapay PHP library is either missing or named incorrectly. Check README.txt for details."), "error");
  return;
}

/**
 * Implements hook_permission().
 */
function gharpay_perm() {
  return array(
    'configure_gharpay',
    'access_gharpay',
  );
}

/**
 * Implements hook_menu().
 */
function gharpay_menu() {

  $items = array();

  $items['admin/config/services/gharpay'] = array(
    'title' => t('Configure Gharpay'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gharpay_credentials_form'),
    'access arguments' => array('configure_gharpay'),
    'file' => 'gharpay.credentials.inc',
    'description' => 'Configure credentials for Gharpay.',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/services/gharpay/configure'] = array(
    'title' => t('Configure Gharpay'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/services/gharpay/settings'] = array(
    'title' => t('Gharpay settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gharpay_config_form'),
    'access arguments' => array('configure_gharpay'),
    'file' => 'gharpay.admin.inc',
    'description' => 'Configure settings for Gharpay.',
    'type' => MENU_LOCAL_TASK,
  );
  $items['gharpay/services/cities'] = array(
    'title' => t('Available cities'),
    'page callback' => 'gharpay_available_cities',
    'access arguments' => array('access_gharpay'),
    'type' => MENU_CALLBACK,
  );
  $items['gharpay/push'] = array(
    'title' => t('Gharpay push service'),
    'page callback' => 'gharpay_push_service',
    'access arguments' => array('access_gharpay'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Get list of available cities with pincodes
 * where Gharpay provides its services.
 */
function gharpay_available_cities() {
  $gharpay = new GpGharpayAPI();
  $cities = $gharpay->getCityList();
  $form = array();
  foreach ($cities as $key => $city) {
    $form[$city] = array(
        '#type' => 'fieldset',
        '#title' => t('@city', array('@city' => $city)),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
    $form[$city][] = array(
        '#type' => 'select',
        '#title' => t('Available pincodes'),
        '#options' => $gharpay->getPincodesInCity($city),
      );
  }
  return drupal_render($form);
}

/**
 * Create an array of client details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function.
 */
function gharpay_create_order_client_details($order) {

  $array = array();

  // Mandatory fields.
  // Should have already passed validation.
  $array = array(
      'firstName' => $order->billing_first_name,
      'contactNo' => $order->billing_phone,
      'address' => str_replace("<BR />", ",", uc_order_address($order, 'billing')),
    );
  // These are optional fields.
  // They did not go under validation earlier.
  if (!empty($order->primary_email)) {
    $array['email'] = $order->primary_email;
  }
  if (!empty($order->billing_last_name)) {
    $array['lastName'] = $order->billing_last_name;
  }
  if (!empty($order->prefix)) {
    $array['prefix'] = $order->prefix;
  }

  return $array;
}

/**
 * Create an array of order details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function.
 */
function gharpay_create_order_order_details($order) {

  $array = array();
  // Mandatory fields.
  $array = array(
      // Should have already passed validation.
      'pincode' => $order->billing_postal_code,
      // Ubercart validation assumed.
      'orderAmount' => $order->order_total,
      // Ubercart validation assumed.
      'clientOrderID' => $order->order_id,
      // Append the date of order.
      'deliveryDate' => date("d-m-Y"),
    );

  // These are optional fields.
  // They did not go under validation earlier.
  if (!empty($order->template_id)) {
    $array['template_id'] = $order->template_id;
  }
  if (!empty($order->payment_mode)) {
    $array['payment_mode'] = $order->payment_mode;
  }

  // @TODO
  // Leaving Additional information intentionally.
  // This would be added via a hook later.

  return $array;
}

/**
 * Create an array of product details to pass to
 * createOrder() function provided by Gharpay API
 * @param
 *   an object of user submitted form. Check API documentation for mandatory fields.
 * @return
 *   an array to pass to createOrder() function if products are available
 *   FALSE otherwise.
 */
function gharpay_create_order_product_details($order) {
  $array = array();
  // Check if products exist.
  if ($order->products) {
    foreach ($order->products as $op_id => $product) {
      $product_description = gharpay_get_order_description($product->nid);
      $array[$op_id] = array(
          'orderId' => $product->order_id,
          'productID' => $product->order_product_id,
          'productQuantity' => $product->qty,
          'unitCost' => $product->price,
          // Need to pass default value for product description
          // else GharpayAPI would throw an exception.
          'productDescription' => $product_description ? $product->title . ": " . $product_description : $product->title,
        );
    }
    return $array;
  }
  else {
    return FALSE;
  }
}

/**
 * Ubercart does not provide product description in $order variable
 * though node id is available.
 * This function would extract node body field of the product node.
 * @param
 *   Node id of product.
 * @return
 *   Body field value of node.
 */
function gharpay_get_order_description($nid) {
  return db_result(db_query("SELECT body FROM {node_revisions} WHERE nid = %d", $nid));
}

/**
 * Format the surcharge display text.
 */
function gharpay_display_surcharge() {
  $surcharge = variable_get('gharpay_surcharge', '');
  if (empty($surcharge)) {
    return '';
  }
  // Trim all the white spaces.
  $surcharge = preg_replace('/\s+/', '', $surcharge);

  // Check if the amount is in percent or units.
  $s_unit = substr($surcharge, -1);
  if ($s_unit != '%') {
    return t("Surcharge of Rs. @s is applicable.", array("@s" => $surcharge));
  }
  else {
    return t("Surcharge of @s is applicable.", array("@s" => $surcharge));
  }
}

/**
 * This function is called to invoke Gharpay's push service.
 * It would update the orders' statuses.
 */
function gharpay_push_service() {
  $params = $_GET;
  // Check if order_id and client_order_id are present.
  if (!isset($_GET['order_id']) || !isset($_GET['client_order_id'])) {
    return "Either Order ID or Client Order ID is missing.";
  }
  try {
    $gharpay = new GpGharpayAPI();
    $push = $gharpay->viewOrderStatus($_GET['order_id']);
    $client_order_id = $_GET['client_order_id'];
    $status = strtolower(trim($push['status']));

    // Map Gharpay status with its keys.
    switch ($status) {
      case 'on-the-way':
        $status = 'gharpay_ontheway';
        break;
      case 'delivered':
        $status = 'gharpay_delivered';
        break;
      case 'failed':
        $status = 'gharpay_failed';
        break;
      case 'cancelled by client':
        $status = 'gharpay_cancelled_by_client';
        break;
      case 'cancelled by customer':
        $status = 'gharpay_cancelled_by_customer';
        break;
      case 'deferred by customer':
        $status = 'gharpay_deferred_by_customer';
        break;
      case 'invalid':
        $status = 'gharpay_invalid';
        break;
      case 'pending':
        $status = 'gharpay_pending';
        break;
      case 'default':
        return t("Invalid response");
    }

    if (function_exists('uc_order_update_status')) {
      // Update status.
      $update = uc_order_update_status($client_order_id, $status);
      // Update database
      $db_update = gharpay_update_transaction($client_order_id, $status);
      if ($update == TRUE) {
        return t("Order $client_order_id updated successfully with status '$status'");
      }
      else {
        return t("Status, '$status', for order $client_order_id could not be updated.");
      }
      // Enter log entry if DB update fails.
      if ($db_update == FALSE) {
        watchdog("gharpay", "Failed to store in database: $client_order_id=>$status", NULL, WATCHDOG_ERROR);
      }
    }
    else {
      return t('ERROR: Function not found: uc_order_update_status');
    }
  }
  catch(Exception $e) {
    drupal_set_message(t("ERROR: $e"), 'error');
    return;
  }
}

/**
 * Implements hook_order_pane_alter().
 */
function gharpay_order_pane_alter(&$panes) {
  foreach ($panes as &$pane) {
    if ($pane['id'] == 'payment') {
      $pane['callback'] = 'gharpay_uc_order_pane_payment';
    }
  }
}

/**
 * This function overrides default uc_order_pane_payment function
 * in ubercart.
 * We add Gharpay transaction details with the payment here.
 */
function gharpay_uc_order_pane_payment($op, $order) {
  switch ($op) {
    case 'view':
      $output = '';
      if (variable_get('uc_payment_tracking', TRUE)) {
        $context = array(
          'revision' => 'formatted-original',
          'type' => 'amount',
          'subject' => array(
            'order' => $order,
          ),
        );
        $output = t('Balance: @balance', array('@balance' => uc_price(uc_payment_balance($order), $context)));
        $output .= ' ('. l(t('View'), 'admin/store/orders/'. $order->order_id .'/payments') .')<br />';
      }
      $method_name = _payment_method_data($order->payment_method, 'review');
      if (empty($method_name)) {
        $method_name = _payment_method_data($order->payment_method, 'name');
      }
      $output .= t('Method: @payment_method', array('@payment_method' => $method_name));
      $func = _payment_method_data($order->payment_method, 'callback');
      if (function_exists($func)) {
        $method_output = $func('order-view', $order);
        if (!empty($method_output)) {
          $output .= '<br />'. $method_output;
        }
      }

      // Add Gharpay transaction details.
      if ($order->payment_method == 'gharpay') {
        $gp_details = gharpay_get_transaction($order->order_id);
        if ($gp_details) {
          $output .= '<br />' . 'Transaction ID: ' . $gp_details->gid;
          $output .= '<br />' . 'Status: ' . $gp_details->status;
        }
      }

      return $output;
      break;

    case 'customer':
      return uc_order_pane_payment($op, $order);
      break;

    case 'edit-form':
      return uc_order_pane_payment($op, $order);
      break;

    case 'edit-theme':
      return uc_order_pane_payment($op, $order);
      break;

    case 'edit-process':
      return uc_order_pane_payment($op, $order);
      break;
  }
}

/**
 * Store gharpay transactions.
 * @param $cid
 *   Client order ID
 * @param $gid
 *   Gharpay order ID
 * @param $status
 *   Status of the transaction
 */
function gharpay_store_transaction($cid, $gid, $status) {
  $query = db_query("INSERT INTO {gharpay_transactions} VALUES (%d, '%s', '%s')", $cid, $gid, $status);
  return $query ? TRUE : FALSE;
}

/**
 * Retrieve gharpay transactions.
 * @param $cid
 *   Client order ID
 * @return $result array
 *   Gharpay order ID and status
 */
function gharpay_get_transaction($cid) {
  $query = db_query("SELECT uos.title AS status, gt.gid AS gid FROM {uc_order_statuses} uos INNER JOIN {gharpay_transactions} gt ON uos.order_status_id=gt.status WHERE gt.cid=%d", $cid);
  $result = db_fetch_object($query);

  return $result;
}

/**
 * Update gharpay transactions.
 * @param $cid
 *   Client order ID
 * @param $status
 *   Status to update
 */
function gharpay_update_transaction($cid, $status) {
  $query = db_query("UPDATE {gharpay_transactions} SET status = '%s' WHERE cid=%d", $status, $cid);
  return $query ? TRUE : FALSE;
}
