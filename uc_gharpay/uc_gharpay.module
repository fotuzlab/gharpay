<?php

/**
 * @file
 * Ubercart Gharpay module.
 * Integrates Gharpay payment system with Ubercart.
 */

/**
 * Implements hook_payment_method().
 */
function uc_gharpay_payment_method() {
  $methods['gharpay'] = array(
    'id' => 'gharpay',
    'name' => t('Gharpay'), 
    'title' => t('Pay using Gharpay<br /><i>%desc</i><br />%surcharge', array('%desc' => variable_get('gharpay_description', ''), '%surcharge' => gharpay_display_surcharge())), 
    'desc' => variable_get('gharpay_description', ''), 
    'callback' => 'uc_gharpay_payment_method_callback', 
    'weight' => 1, 
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Callback for uc_gharpay_payment_method().
 */
function uc_gharpay_payment_method_callback($op, &$order, $silent = FALSE) {

  switch ($op) {
    case 'cart-details':
      // @TODO: return markup not working here.
      // Add description with gharpay.
      break;

    case 'cart-process':
      if ($order->payment_method == 'gharpay') {
        // Check if username, password and service url is set.
        $apikey = variable_get('gharpay_api_key', '');
        $password = variable_get('gharpay_password', '');
        if (!isset($apikey) || !isset($password) || empty($apikey) || empty($password)) {
          drupal_set_message("There is some problem with Gharpay payment method. Please try any other payment mode.", "error");
          watchdog("gharpay", "Username or password missing.", NULL, WATCHDOG_ERROR);
          return FALSE;
        }
        // There are some mandatory fields requested by Gharpay API.
        // Validate.
        // Can not make them mandatory through hook_form_alter() as there might be some other payment
        // methods those do not require them.

        try {
        $gharpay = new GpGharpayAPI();

        // Get city. Mandatory.
        $city = !empty($order->billing_city) ? ($gharpay->isCityPresent($order->billing_city) == 1 ? $order->billing_city : NULL) : NULL;
        // Get pincode. Mandatory.
        $pincode = !empty($order->billing_postal_code) ? ($gharpay->isPincodePresent($order->billing_postal_code) == 1 ? $order->billing_postal_code : NULL) : NULL;
        // Get first name. Mandatory.
        $first_name = !empty($order->billing_first_name) ? $order->billing_first_name : NULL;
        // Get contact number. Mandatory.
        $contact_no = !empty($order->billing_phone) ? $order->billing_phone : NULL;
        // Get address. Mandatory.
        $address = !empty($order->billing_street1) ? $order->billing_street1 : NULL;
        // Get country code. Mandatory.
        $country = !empty($order->billing_country) ? $order->billing_country : '';

        // Check if pincode or city are left out or
        // Gharpay does not have service in that area.
        if ($pincode == NULL || $city == NULL) {
          // Set message.
          drupal_set_message(
            t("Gharpay doesn't provide its services in the given pincode region. Kindly select another city or see the list of available cities !here.",
            array(
              "!here" => l("here", "gharpay/services/cities", array("attributes" => array("target" => "_blank")))
              )
            ),
            "error"
            );
          // Defer submit.
          return FALSE;
        }

        // India's country code is 356 in Ubercart list.
        // Deny checkout if Pay only in India option is set in Ghrapay configuration.
        if ($country != '356' && variable_get('gharpay_allow_only_in_india', 0) == '1') {
          drupal_set_message(t("Gharpay transactions are limited to India."), "error");
          return FALSE;
        }

        // Validate first name is filled.
        if ($first_name == NULL) {
          drupal_set_message(t("Gharpay transactions require delivery name."), "error");
          return FALSE;
        }

        // Validate contact number is filled.
        if ($contact_no == NULL) {
          drupal_set_message(t("Gharpay transactions require delivery contact number."), "error");
          return FALSE;
        }
        else {
          // Check if contact number is all numeric and
          // counts to 10 digits.
          $contact_num_len = strlen($contact_no);
          if (!is_numeric($contact_no)) {
            drupal_set_message("The phone number seems invalid.", "error");
            return FALSE;
          }
        }

        // Validate address is filled.
        if ($address == NULL) {
          drupal_set_message(t("Gharpay transactions require delivery address."), "error");
          return FALSE;
        }
      }
      catch(Exception $e){
        drupal_set_message($e->getMessage(), "error");
        watchdog("gharpay", "Exception: $e", NULL, WATCHDOG_ERROR);
        return FALSE;
      }

      }
      break;
    case 'cart-review':
      return array(
          gharpay_display_surcharge(),
        );
  }
}

/**
 * Implements hook_order().
 */
function uc_gharpay_order($op, $order, $arg2) {
  switch ($op) {
    case 'submit':
    try {
      $gharpay = new GpGharpayAPI();

      // Get array of customer details.
      $customer_details = gharpay_create_order_client_details($order);

      // Get array of order details.
      $order_details = gharpay_create_order_order_details($order);

      // Get array of product details.
      $product_details = gharpay_create_order_product_details($order);

      // Do the transaction.
      $create_order = $gharpay->createOrder($customer_details, $order_details, $product_details);
      drupal_set_message(t("Your Gharpay order id is @orderid", array("@orderid" => $create_order['gharpayOrderId'])), "status");
    }
    catch(Exception $e) {
      drupal_set_message($e->getMessage(), "error");
      watchdog("gharpay", "Exception: $e", NULL, WATCHDOG_ERROR);
      return array(array('pass' => FALSE));
    }
      break;
  }
}